parameters:
  - name: workingDir
    type: string
    default: $(System.DefaultWorkingDirectory)

steps:
- script: node common/scripts/install-run-rush.js publish --publish --pack --include-all
  displayName: rush publish pack
  workingDirectory: ${{ parameters.workingDir }}
  condition: and(succeeded(), in(variables['Build.Reason'], 'IndividualCI', 'Schedule', 'Manual'), eq(variables['Agent.OS'], 'Windows_NT'))

- task: PythonScript@0
  displayName: Gather packages for release
  inputs:
    workingDirectory: ${{ parameters.workingDir }}
    scriptSource: inline
    script: |
     import sys, os, glob, re, subprocess
     import shutil

     def determineDistTag(currentVer, latestVer):
       ## The master branch is the only one that should get the 'nightly' release tag
       mainBranch = "master"

       distTag = None
       if len(sys.argv) == 4:
         branchName = sys.argv[3]

         print ("Branch name: " + branchName + "\nCurrent version: " + currentVer + "\nLatest version: " + latestVer)

         # The most common case is the tag will be a nightly tag
         if mainBranch in branchName:
           distTag = "nightly"
         elif "release/" in branchName:
           print ("On a release branch")
           currentDevVer = -1
           if ("-" in currentVer):
             currentVer, currentDevVer = currentVer.split("-")
             currentDevVer = int(currentDevVer.split(".")[1])

           currentMajorVer, currentMinorVer, currentPatchVer = currentVer.split(".")
           latestMajorVer, latestMinorVer, latestPatchVer = latestVer.split(".")
           currentMajorVer, currentMinorVer, currentPatchVer = int(currentMajorVer), int(currentMinorVer), int(currentPatchVer)
           latestMajorVer, latestMinorVer, latestPatchVer = int(latestMajorVer), int(latestMinorVer), int(latestPatchVer)

           if (currentDevVer != -1):
             distTag = "rc"
           else:
             if currentMajorVer > latestMajorVer:
               distTag = "latest"
             elif currentMajorVer < latestMajorVer:
               distTag = "previous"
             else:
               if currentMinorVer < latestMinorVer:
                 distTag = "previous"
               else:
                 # Not a dev version and minor version is >= latest so it must be a new patch or minor release
                 distTag = "latest"

       if distTag is None:
         return

       print ("Setting dist tag " + distTag)
       print ("##vso[build.addbuildtag]dist-tag " + distTag)
       print ("##vso[task.setvariable variable=isRelease;isSecret=false;isOutput=true;]true")

     artifactStagingDir = os.path.realpath(sys.argv[1])
     sourcesDirectory = os.path.realpath(sys.argv[2])

     ## Setup
     stagingDir = os.path.join(artifactStagingDir, "imodeljs", "packages")
     os.makedirs(stagingDir)

     packageDir = os.path.join(sourcesDirectory, "common", "temp", "artifacts", "packages")

     artifactPaths = glob.glob(os.path.join(packageDir, "*.tgz"))

     packagesToPublish = False
     localVer = ""
     latestVer = ""
     for artifact in artifactPaths:
       baseName = os.path.basename(artifact)
       print ("")
       print ("Checking package: '" + baseName + "'...")

       localVer = re.search(r'(\d\.\d.*).tgz', baseName)
       localVer = localVer.group(1)

       packageName = baseName[:(len(baseName) - len(localVer) - 5)]
       packageName = "@" + packageName.replace("-", "/", 1)

       command = "npm view " + packageName + "@" + localVer + " version"
       proc = subprocess.Popen(command, stdin = subprocess.PIPE, stdout = subprocess.PIPE, shell=True)

       # We are going to assume if a version is provided back from the above call, that this version exists
       # on the server.  Otherwise, it returns an empty string.
       serverVer = proc.communicate()[0]

       if proc.returncode != 0:
         packagesToPublish = True
         print ("The package does not yet exist.  Copying " + packageName + " to staging area.")
         shutil.copy(artifact, stagingDir)
         continue

       if 0 != len(serverVer):
         print ("The version already exists.  Skipping...")
         continue

       packagesToPublish = True
       print ("Local version is newer than on the server.  Copying package " + packageName + " to staging area.")
       shutil.copy(artifact, stagingDir)

       command = "npm view " + packageName + " dist-tags.latest"
       proc = subprocess.Popen(command, stdin = subprocess.PIPE, stdout = subprocess.PIPE, shell=True)
       latestVer = proc.communicate()[0]
       if len(latestVer) == 0:
         print("No version found for dist-tag 'latest'")

     if packagesToPublish:
       determineDistTag(localVer, latestVer)
       print ("There are packages to publish.")
       print ("##vso[build.addbuildtag]package-release")
       print ("##vso[task.setvariable variable=isRelease;isSecret=false;isOutput=true;]true")
     else:
       print ("All packages are up-to-date.")

    arguments: '$(Build.ArtifactStagingDirectory) $(Build.SourcesDirectory) $(Build.SourceBranch)'
    condition: and(succeeded(), in(variables['Build.Reason'], 'IndividualCI', 'Schedule', 'Manual'), eq(variables['Agent.OS'], 'Windows_NT'))

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact: packages'
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)/imodeljs/packages'
    ArtifactName: packages
  condition: and(succeeded(), in(variables['Build.Reason'], 'IndividualCI', 'Schedule', 'Manual'), eq(variables['Agent.OS'], 'Windows_NT'))

